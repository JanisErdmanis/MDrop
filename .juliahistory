@time TheoreticalDropEnergy(1,3.1,3.05,10,100)
@time TheoreticalDropEnergy(1,3.1,3.09,10,100)
@time TheoreticalDropEnergy(1,3.1,3.09999,10,100)
@time TheoreticalDropEnergy(1,1,1,10,100)
@time TheoreticalDropEnergy(1,1.0001,1.00001,10,100)
@time TheoreticalDropEnergy(1,1.0001,1.00001,10,100)
f([1.001,1.01])
f([1.001,2])
f([1.001,-2])
f([1.001,+2])
Fminbox()
DifferentiableFunction(f)
f(1,1)
f(1.,1.)
f([1.,1.])
TheoreticalDropEnergy(1,2,3,10,10)
TheoreticalDropEnergy(1,1,1,10,10)
TheoreticalDropEnergy(1,1.1,1.1,10,10)
TheoreticalDropEnergy(0.9,1.1,1.1,10,10)
TheoreticalDropEnergy(0.9,1.1,1.1,10,10)
TheoreticalDropEnergy(0.9,1.1,1.1,10,10)
TheoreticalDropEnergy(0.9,1.1,1,10,10)
TheoreticalDropEnergy(0.999,1.1,1,10,10)
TheoreticalDropEnergy(0.999,1.0001,1,10,10)
TheoreticalDropEnergy(0.999,1.0001,1,10,10)
f([1.,1.])
f([1.,1.])
f([1.,1.])
using PyPlot
grey()
style
style.use
log(100)
lg(1-)
lg(10)
lg(100)
Bmf
plt.plot([],[])
plt.plot([],[],dash=[5,5])
plt.plot([],[],dashes=[5,5])
plt.plot([1,5,2,4], '-', dashes=[8, 4, 2, 4, 2, 4])

plt.plot([1,5,2,4], '-', dashes=[8, 4, 2, 4, 2, 4])

plt.plot([1,5],[2,4], '-', dashes=[8, 4, 2, 4, 2, 4])
plt.plot([1,5],[2,4],'-')
plt.plot([1 2 3],[4 5 6],'-')
[1,2,3]
plt.plot([1,2,3],[1,2,3])
plt.plot([1,2,3],[1,2,3],dashes=[5,5])
plt.plot([1,2,3],[1,2,3],"-",dashes=[5,5])
plt.plot([1,2,3],[1,2,3])
plt.cycler
plt.rc("axes",prop_cycle="cycler('color','kk)")
plt.rc("axes",prop_cycle="(cycler('color','kk))")
plt.rc("axes",prop_cycle="(cycler('color', 'kkkk') + cycler('linestyle',['-.',':','--','-']))")
plt.rc("axes",prop_cycle="(cycler('color', 'kkkk')")
plt.rc("axes",prop_cycle="(cycler('color', 'kkkk'))")
plt.rc("axes",prop_cycle="(cycler('dashes', [(5,5),(5,5)]))")
plt.rc("axes",prop_cycle="(cycler('dash', [(5,5),(5,5)]))")
plt.rc("axes",prop_cycle="(cycler('dashes', [(5,5),(5,5)]))")
using PyCall
@pyimport pylab as plt
plt.cycler
@pyimport pylab as plt2
plt2.cycler
plt2.cycler("dashes",[(5,5),(5,5)])
@pyimport math.sin
plt2.cycler("dashes",[(5,5),(5,5)])
plt2.cycler("dashes",[(5,5),(5,5)]) + plt2.cycler("dashes",[(5,5),(5,5)])
plt.rc("axes",prop_cycle="cycler('linestyle', ['-', (0,(3,1))] )")
plt.rc("axes",prop_cycle="cycler('linestyle', ['-', (0,(3,1)),'--','-'] )")
plt.rc("axes",prop_cycle="(cycler('color', 'kkkk') + cycler('linestyle', ['-', (0,(3,1)),'--','-'] ))")

"(cycler('color',$([reds(x) for x in [0,0.3,0.6,0.9]])))"
"(cycler('color',$([reds(x) for x in [0,0.3,0.6,0.9]]...)))
dksd
"(cycler('color',[$(join([reds(x) for x in [0,0.3,0.6,0.9]],',')])))"
"(cycler('color',[$(join([reds(x) for x in [0,0.3,0.6,0.9]],',')])))"

"$(join([reds(x) for x in [0,0.3,0.6,0.9]],',')"
"$(join([reds(x) for x in [0,0.3,0.6,0.9]],',')"
Dict(:family=>"serif",:serif=>"Times")
plt.rc("font", Dict("family"=>"serif","serif"=>"Times"))
sans-serif
:sans-serif
:(sans-serif)
Dict(:family=>"serif",:serif=>"Times")
plt.rc("font",Dict(:family=>"serif",:serif=>"Times"))
plt.rc("font",Dict(:family=>"serif",:serif=>"Times")...)
plt.rc("font";Dict(:family=>"serif",:serif=>"Times")...)
plt.rc("font";Dict(:family=>"serif",:serif=>"Times")...)
plt.rc("font";Dict(:family=>"serif",:sans-serif=>"Times")...)
plt.rc("font";Dict(:family=>"serif","sans-serif"=>"Times")...)
plt.rc("font";Dict("family"=>"serif","sans-serif"=>"Times")...)
plt.rc("font";Dict(:family=>"serif",:(sans-serif)=>"Times")...)
plt.rc("font";Dict(:family=>"serif",:sans-serif=>"Times")...)
plt.rc("font";Dict(:family=>"serif",:sans-serif=>"Times")...)
rc
rcParams
plt.rcParams
plt.rcParams
matplotlib
matplotlib[:rcParams]
lstat
gca()
ax2
ax2[:xlabel]
ax2[:legend]
fig[:add_subplot]
scale
maximum(df[:x2]]))
maximum(df[:x2]])
maximum(df[:x2])
df[:x2]]
df[:x2]
df[:x1]
df[:x3]
df
df
dfg
dfg
scale
maximum(dfg[:x2]]))
maximum(dfg[:x2])
dfg
dfg[1:200]]
dfg[1:200]
dfg[1:10]
dfg[[1:20]]]
dfg[[1:20]]
dfg[1:10]
dfg[:Row]
dfg[:ROW]
dfg.
using DataFrames
using DataFrames
ENV["JULIA_PKGDIR"]
EllipsoidMeshBm(22.5,0.2)
EllipsoidMeshBm(22.5,0.2)
EllipsoidMeshBm(25,0.2)
EllipsoidMeshBm(25,0.2)
i = 1
for i in 1:10
end
i
i = 1
for i in 1:10
if i>Bm
EllipsoidMeshBm(25,0.2)
EllipsoidMeshBm(22.5,0.2)
EllipsoidMeshBm(20,0.2)
EllipsoidMeshBm(20,0.2)
DistmeshSurfaceMesher(0.2))
DistmeshSurfaceMesher(0.2)
DistmeshSurfaceMesher(0.2,[-2.1 -2 -1.; 2.1 2 1.])
DistmeshSurfaceMesher(0.2)
DistmeshSurfaceMesher(0.2).step
DistmeshSurfaceMesher(0.2).boxsize
using SurfaceGeometry
DistmeshSurfaceMesher(0.2)
DistmeshSurfaceMesher(0.2,[-2.1 -2 -1.; 2.1 2 1.])
EllipsoidMeshBm(22.5,0.2)
DistmeshSurfaceMesher(0.2,[-2.1 -2 -1.; 2.1 2 1.])
DistmeshSurfaceMesher(0.2,[-2.1 -2 -1.; 2.1 2 1.])
DistmeshSurfaceMesher(0.2,[-2.1 -2 -1.; 2.1 2 1.])
EllipsoidMeshBm(22.5,0.2)
EllipsoidMeshBm(22.5,0.2)
EllipsoidMeshBm(22.5,0.1)
EllipsoidMeshBm(22.5,0.08)
EllipsoidMeshBm(22.5,0.08)
EllipsoidMeshBm(20,0.08)
EllipsoidMeshBm(25,0.08)
EllipsoidMeshBm(30,0.08)
EllipsoidMeshBm(30,0.05)
ls
for i in 1:10
while true
break
end
println("Hello")
end
1:10
println(1:10)
a = 1:10
"a is $a"
10:1
10:1
10:9
10:1
10:0
10:-1:1
collect(10:-1:1)
typeof(a,Real)
typeof(a)
typeof(a)<:Real
typeof(a)>:Real
typeof(a)<:Real
a
typeof(10)<:Real
typeof(a)
typeof(a)
a
typeof(10:-1:1)
typeof(10:-0.1:1)
typeof(10:-1:1)
supertype(typeof(10:-1:1)))
supertype(typeof(10:-1:1))
supertype
super
super(typeof(10:-1:1))
super(typeof(10:-1:1))
super(typeof(10:-0.1:1))
super(typeof(10:-0.1:1.1))
super(typeof(10:-0.1:1.1)) 
a <: Range
a <: Range{Real}
typeof(a) <: Range{Real}
typeof(a) <: Range
typeof(a) <: Range
s = "1:10"
convert(s.Float64)
convert(s,Float64)
parse(Float64,"1.2")
parse(Float64,"1.2:2")
parse(Range,"1.2:2")
parse(Range{Real},"1.2:2")
eval("1")
evaluate("1")
parse("1")
parse("1:10")
eval(parse("1:10"))
curvatures
curvatures
points 
Array(10)
Array(Float64,10)
0.671/3.487
0.65162/3.4482
EllipsoidMeshBm(19,0.2)
EllipsoidMeshBm(19,0.05)
EllipsoidMeshBm(19,0.08)
EllipsoidMeshBm(18,0.08)
EllipsoidMeshBm(17,0.08)
EllipsoidMeshBm(17.5,0.08)
EllipsoidMeshBm(17.75,0.08)
EllipsoidMeshBm(17.75,0.1)
EllipsoidMeshBm(27,0.08)
EllipsoidMeshBm(27,0.09)
EllipsoidMeshBm(27,0.09)
EllipsoidMeshBm(40,0.09)
EllipsoidMeshBm(40,0.09)
EllipsoidMeshBm(40,0.09)
EllipsoidMeshBm(40,0.08)
EllipsoidMeshBm(40,0.1)
EllipsoidMeshBm(40,0.07)
EllipsoidMeshBm(50,0.1)
EllipsoidMeshBm(50,0.8)
EllipsoidMeshBm(50,0.08)
EllipsoidMeshBm(50,0.07)
EllipsoidMeshBm(50,0.06)
EllipsoidMeshBm(60,0.08)
EllipsoidMeshBm(65,0.08)
EllipsoidMeshBm(65,0.09)
EllipsoidMeshBm(66,0.08)
EllipsoidMeshBm(67,0.08)
EllipsoidMeshBm(67,0.07)
EllipsoidMeshBm(67,0.06)
EllipsoidMeshBm(70,0.08)
EllipsoidMeshBm(70,0.09)
EllipsoidMeshBm(70,0.07)
EllipsoidMeshBm(75,0.07)
EllipsoidMeshBm(75,0.08)
EllipsoidMeshBm(75,0.08)
0.68099/3.4928
0.66900308/4.083623
0.9477127/1.669498
0.845726/2.023357
0.80119/2.25994
0.7435447/2.682312
0.710829/2.987502
0.748395/4.742509
0.7002572/3.154403
1.108882/1.368928
dfg
[dfg dfg]
[dfg... dfg]
merge(dfg,dfg)
dfg
append!(dfg,dfg)
dfg
append(dfg,dfg)
typeof([1,2,3])
typeof([1,2,3])<:Array
EllipsoidMeshBmCGAL(25,0.05)
CGALSurfaceMesher
CGALSurfaceMesher(10,0.2,0.2,2)
EllipsoidMeshBmCGAL(25,0.05)
fdis(x,y,z) = x^2 + y^2 + z^2 - 1
points, faces = SurfaceMesh(fdis,CGALSurfaceMesher())
EllipsoidMeshBmCGAL(25,0.05)
EllipsoidMeshBmCGAL(25,0.1)
fdis
a
b
c
Bm = 25
a
b
c
Bm
i
Bm
EllipsoidMeshBmCGAL(25,0.1)
a,b,c=2.9985,0.68425,0.48738
points,faces = SurfaceMesh(fdis,mesher)
fdis
fdis(1,1,1)
const a, const b, const c=2.9985,0.68425,0.48738
const a=2.9985
const aa=2.9985
const bb=0.68425
const cc=0.48738
const ccc=0.48738
fdis2(x,y,z) = x^2/aa^2 + y^2/bb^2 + z^2/ccc^2 - 1
points,faces = SurfaceMesh(fdis2,mesher)
fdis
fdis(x,y,z) = x^2 + y^2 + z^2 - 1

points,faces = SurfaceMesh(fdis2,mesher)
points,faces = SurfaceMesh(fdis,mesher)
a
b
c
fdis(x,y,z) = x^2/2.9985^2 + y^2/0.68425^2 + z^2/0.48738^2 - 1
points,faces = SurfaceMesh(fdis,mesher)
mesher = CGALSurfaceMesher(10,0.1,0.1,3)
points,faces = SurfaceMesh(fdis,mesher)
fdis3(x,y,z) = x^2 + y^2 + z^2/2^2 - 1
points,faces = SurfaceMesh(fdis,mesher)
fdis3(x,y,z) = x^2 + y^2 + z^2 - 1
points,faces = SurfaceMesh(fdis,mesher)
points,faces = SurfaceMesh(fdis3,mesher)
fdis3(x,y,z) = x^2 + y^2 + z^2/0.5 - 1
points,faces = SurfaceMesh(fdis3,mesher)
fdis3(x,y,z) = x^2 + y^2 + z^2*0.5 - 1
points,faces = SurfaceMesh(fdis3,mesher)
fdis3(x,y,z) = x^2 + y^2 + (z*2)^2 - 1
points,faces = SurfaceMesh(fdis3,mesher)
fdis3(x,y,z) = x^2 + y^2 + (z/2)^2 - 1
points,faces = SurfaceMesh(fdis3,mesher)
EllipsoidMeshCGAL
EllipsoidMeshBmCGAL(25,0.1)
fdis(x,y,z) = (x/2.9985)^2 + (y/0.68425)^2 + (z/0.684256)^2 - 1
points,faces = SurfaceMesh(fdis,mesher)
fdis3(x,y,z) = x^2 + y^2 + (z/2)^2 - 1
points,faces = SurfaceMesh(fdis3,mesher)
fdis3(x,y,z) = x^2 + y^2 + (z/2.1)^2 - 1
points,faces = SurfaceMesh(fdis3,mesher)
fdis3(x,y,z) = x^2 + y^2 + z^2 - 1.2
points,faces = SurfaceMesh(fdis3,mesher)
float32
float32(1.1)
Float32(1.1)
fdis3(x,y,z) = x^2 + y^2 + z^2 - Float32(1.2)
points,faces = SurfaceMesh(fdis3,mesher)
fdis3(x,y,z)::Float32 = x^2 + y^2 + z^2 - 1.2
fdis3(x,y,z) = x^2 + y^2 + z^2 - 1.2::Float32
points,faces = SurfaceMesh(fdis3,mesher)
fdis3(x,y,z) = (x^2 + y^2 + z^2 - 1.2)::Float32
points,faces = SurfaceMesh(fdis3,mesher)
x = 5
g = 3
g = 3
fdis(x,y,z) = x^2/Float32(g^2) + y^2 + z^2 - 1
points,faces = SurfaceMesh(fdis,mesher)
EllipsoidMeshBmCGAL(25,0.1)
a
b
c
    fdis(x,y,z) = x^2/Float32(a^2) + y^2/Float32(b^2) + z^2/Float32(c^2) - 1
EllipsoidMeshBmCGAL(25,0.1)
points,faces = SurfaceMesh(fdis,mesher)
mesher = CGALSurfaceMesher(10,0.1,0.1,3)
points,faces = SurfaceMesh(fdis,mesher)
mesher = CGALSurfaceMesher(10,0.01,0.01,3)
points,faces = SurfaceMesh(fdis,mesher)
mesher = CGALSurfaceMesher(10,0.05,0.05,3)
points,faces = SurfaceMesh(fdis,mesher)
a,b,c=2.9985,0.68425,0.48738
fdis(x,y,z) = x^2/Float32(a^2) + y^2/Float32(b^2) + z^2/Float32(c^2) - 1
mesher = CGALSurfaceMesher(10,0.1,0.1,3)


points,faces = SurfaceMesh(fdis,mesher)
save("meshes/elipsCGAL-Bm25.jld","points",points,"faces",faces)
mesher = CGALSurfaceMesher(20,0.1,0.1,3)
points,faces = SurfaceMesh(fdis,mesher)
save("meshes/elipsCGAL-Bm25.jld","points",points,"faces",faces)
volume(points,faces)
mesher = CGALSurfaceMesher(40,0.1,0.1,3)
points,faces = SurfaceMesh(fdis,mesher)
mesher = CGALSurfaceMesher(20,0.1,0.1,4)
points,faces = SurfaceMesh(fdis,mesher)
volume(points,faces)
volume(points,faces)
save("meshes/elipsCGAL-Bm25.jld","points",points,"faces",faces)
points,faces = SurfaceMesh(fdis,mesher)
points,faces = subdivision(points,faces)
save("meshes/elipsCGAL-Bm25.jld","points",points,"faces",faces)
FaceBasedDS(faces)
points,faces = SurfaceMesh(fdis,mesher)
FaceBasedDS(faces)
curvatures = Array(size(points,2))
MeanCurvatures!(curvatures,points,faces,n,i->FaceVRing(i,faces))
curvatures = Array(Float64,size(points,2))
MeanCurvatures!(curvatures,points,faces,n,i->FaceVRing(i,faces))
curvatures = Array(Float64,size(points,2))
MeanCurvatures!(curvatures,points,faces,i->FaceVRing(i,faces))
n = Array(FLoat64,size(points)...)
NormalVectors!(n,points,faces,i->FaceVRing(i,faces))
n = Array(FLoat64,size(points)...)
n = Array(Float64,size(points)...)

NormalVectors!(n,points,faces,i->FaceVRing(i,faces))
faces
EllipsoidMeshBm(25,0.2)
EllipsoidMeshBm(25,0.2)
EllipsoidMeshBm(25,0.3)
EllipsoidMeshBm(25,0.1)
EllipsoidMeshBm(25,0.15)
EllipsoidMeshBm(25,0.18)
Bmi
Bm
Efin
plt.errorbar(Bm,Efin,xerr=0.1*Bm,yerr=0.1*Efin)
plt.errorbar(Bm,Efin,".",xerr=0.1*Bm,yerr=0.1*Efin)
plt.errorbar(Bm,Efin,fmt=".",xerr=0.1*Bm,yerr=0.1*Efin)
Bm
Efin
EllipsoidMeshBm(50,0.15)
EllipsoidMeshBm(50,0.16)
EllipsoidMeshBm(50,0.165)
EllipsoidMeshBm(50,0.161)
EllipsoidMeshBm(50,0.159)
EllipsoidMeshBm(50,0.158)
EllipsoidMeshBm(50,0.157)
EllipsoidMeshBm(50,0.21)
EllipsoidMeshBm(50,0.25)
EllipsoidMeshBm(50,0.33)
EllipsoidMeshBm(50,0.23)
EllipsoidMeshBm(50,0.29)
EllipsoidMeshBm(50,0.18)
EllipsoidMeshBm(50,0.184)
EllipsoidMeshBm(50,0.158)
EllipsoidMeshBm(50,0.159)
EllipsoidMeshBm(52,0.159)
EllipsoidMeshBm(48,0.159)
EllipsoidMeshBm(48,0.158)
EllipsoidMeshBm(47,0.158)
EofBm(20)
EofBm(50)
EofBm(50)
EofBm(50)
df3[:x1]
df3[:x1][1]
length(df3)
size(df3)
size(df3,1)
EofBm(50)
EofBm(50)
EofBm(50)
EofBm(50)
EofBm(47)
EofBm(47)
yerr 
Eteor = [EofBm(Bm[i]) for i in 1:length(Bm)]
0.732592/2.77945
175*0.148
415*0.148
Bm
dfg
dfg2
join(dfg1,dfg2)
join(dfg1,dfg2,on=:ID)
dfg
join(dfg1,dfg2,on=:Row)
dfg1
vcat(dfg1)
vcat(dfg1,dfg2)
vcat(dfg1,dfg2,dfg1)
join("112","1222","22")
join("112","1222",";")
join("112","1222",";")
join("112","1222",";U")
join([1,2,3],"/")
Pkg.dir
joinpath(dirname(dirname("www"), "src","libraries","eltopo-wrapper", "eltopo.so")
)
joinpath(dirname(dirname("www"), "src","libraries","eltopo-wrapper", "eltopo.so"))
